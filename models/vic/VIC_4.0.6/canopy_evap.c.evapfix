#include <stdio.h>
#include <stdlib.h>
#include <vicNl.h>

static char vcid[] = "$Id: canopy_evap.c.evapfix,v 1.1.2.1 2006/10/18 22:59:15 vicadmin Exp $";

double canopy_evap(layer_data_struct *layer_wet,
                   layer_data_struct *layer_dry,
                   veg_var_struct    *veg_var_wet, 
                   veg_var_struct    *veg_var_dry, 
		   char               CALC_EVAP,
                   int                veg_class, 
                   int                month, 
                   double             mu,
		   double            *Wdew,
                   double             dt,
                   double             rad,
		   double             vpd,
		   double             net_short,
		   double             air_temp,
                   double             ra,
                   double             displacement,
                   double             roughness,
                   double             ref_height,
		   double             elevation,
                   double            *prec,
		   double            *depth,
		   double            *Wcr,
		   double            *Wpwp,
		   float             *root)
/**********************************************************************
	canopy_evap.c	Dag Lohmann		September 1995

  This routine computes the evaporation, traspiration and throughfall
  of the vegetation types for multi-layered model.

  The value of x, the fraction of precipitation that exceeds the 
  canopy storage capacity, is returned by the subroutine.

  UNITS:	moist (mm)
		evap (mm)
		prec (mm)
		melt (mm)

  VARIABLE TYPE        NAME          UNITS DESCRIPTION
  atmos_data_struct    atmos         N/A   atmospheric forcing data structure
  layer_data_struct   *layer         N/A   soil layer variable structure
  veg_var_struct      *veg_var       N/A   vegetation variable structure
  soil_con_struct      soil_con      N/A   soil parameter structure
  char                 CALC_EVAP     N/A   TRUE = calculate evapotranspiration
  int                  veg_class     N/A   vegetation class index number
  int                  month         N/A   current month
  global_param_struct  global        N/A   global parameter structure
  double               mu            fract wet (or dry) fraction of grid cell
  double               ra            s/m   aerodynamic resistance
  double               prec          mm    precipitation
  double               displacement  m     displacement height of surface cover
  double               roughness     m     roughness height of surface cover
  double               ref_height    m     measurement reference height

  Modifications:
  9/1/97	Greg O'Donnell
  4-12-98  Code cleaned and final version prepared, KAC
  06-25-98 modified for new distributed precipitation data structure KAC
  01-19-00 modified to function with new simplified soil moisture 
           scheme                                                  KAC
  13-Oct-04 Modified algorithm for estimating canopy evaporation.	TJB

**********************************************************************/
{

  /** declare global variables **/
  extern veg_lib_struct *veg_lib; 
#if LINK_DEBUG
  extern debug_struct debug;
#endif
  extern option_struct options;

  /** declare local variables **/
  int                Ndist;
  int                dist;
  int                i;
  double             ppt;		/* effective precipitation */
  double             f;		/* fraction of time step in which canopy storage > 0.0 */
  double             throughfall;
  double             throughfall_lai;
  double             Evap;
  double             tmp_Evap;
  double             canopyevap;
  double             tmp_Wdew;
  double             layerevap[MAX_LAYERS];
  layer_data_struct *tmp_layer;
  veg_var_struct    *tmp_veg_var;
  double             Epot;
  double             tmp_Wdew_init;
  double             canopyevap_avg;
  double             canopyevap_avg_prev;
  double             canopyevap_avg_prev_prev;
  double             fill_rate;
  double             t_steady_state;
  double             tmp_Wdew_bound;
  double             tmp_Wdew_final;
  double             tmp_Wdew_avg;
  double             error;
  int                count;
  double             EVAP_TOL = 0.01; // End iteration when estimates of canopyevap differ by less than this
  int                MAX_ITER = 20;   // Max number of iterations

  /********************************************************************** 
     CANOPY EVAPORATION

     Calculation of evaporation from the canopy, including the
     possibility of potential evaporation exhausting ppt+canopy storage
     2.16 + 2.17
     Index [0] refers to current time step, index [1] to next one
     If f < 1.0 than veg_var->canopyevap = veg_var->Wdew + ppt and
                     Wdew = 0.0

     DEFINITIONS:
     Wdmax - max monthly dew holding capacity
     Wdew - dew trapped on vegetation

     Modified 
     04-14-98 to work within calc_surf_energy_balance.c  KAC
     07-24-98 fixed problem that caused hourly precipitation
              to evaporate from the canopy during the same
	      time step that it falls (OK for daily time step, 
	      but causes oscilations in surface temperature
	      for hourly time step)                      KAC, Dag
	      

  **********************************************************************/ 

  if(options.DIST_PRCP) Ndist = 2;
  else Ndist = 1;

  Evap = 0;

  for(dist=0;dist<Ndist;dist++) {

    /* Initialize variables */
    for(i=0;i<options.Nlayer;i++) layerevap[i] = 0;
    canopyevap = 0;
    throughfall = 0;
    throughfall_lai = 0;

    /* Set parameters for distributed precipitation */
    if(dist==0) {
      tmp_layer   = layer_wet;
      tmp_veg_var = veg_var_wet;
      ppt         = prec[WET];
      tmp_Wdew    = Wdew[WET];
    }
    else {
      tmp_layer   = layer_dry;
      tmp_veg_var = veg_var_dry;
      ppt         = prec[DRY];
      mu          = (1. - mu);
      tmp_Wdew    = Wdew[DRY];
    }      

    if(mu > 0) {

      /****************************************************
        Compute Evaporation from Canopy Intercepted Water
      ****************************************************/

      /** Due to month changes ..... Wdmax based on LAI **/
      tmp_veg_var->Wdew = tmp_Wdew;
      if (tmp_Wdew > veg_lib[veg_class].Wdmax[month-1]) {
	throughfall_lai = tmp_Wdew - veg_lib[veg_class].Wdmax[month-1];
	tmp_Wdew = veg_lib[veg_class].Wdmax[month-1];
      }

      // Maximum possible canopy evaporation under current conditions
      Epot = penman(rad, vpd * 1000., ra, (double) 0.0, 
		  veg_lib[veg_class].rarc,
		  veg_lib[veg_class].LAI[month-1], 
		  (double) 1.0, air_temp, 
		  net_short, elevation, 
		  veg_lib[veg_class].RGL) * dt / 24.0;

      // Initial estimate of canopy evaporation based on amount of water
      // stored in canopy at beginning of time step
      tmp_Wdew_init = tmp_Wdew;
      canopyevap = pow((tmp_Wdew_init / veg_lib[veg_class].Wdmax[month-1]),
		       (2.0/3.0)) * Epot;

      // Initialize our f(t),f(t-1),f(t-2),f(t-3)
      canopyevap_avg = canopyevap;
      canopyevap_avg_prev = canopyevap;
      canopyevap_avg_prev_prev = canopyevap;

      count = 0;



//fprintf(stderr,"%d %f %f %f %f\n",count,ppt,canopyevap,canopyevap_avg,canopyevap_avg_prev);


      do {



      // Update our f(t),f(t-1),f(t-2),f(t-3)
      canopyevap_avg_prev_prev = canopyevap_avg_prev;
      canopyevap_avg_prev = canopyevap_avg;
      canopyevap_avg = canopyevap;

      // Estimate rate of change of canopy storage (fill_rate)
      if (tmp_Wdew_init == veg_lib[veg_class].Wdmax[month-1] && ppt > canopyevap_avg)
        fill_rate = 0.0;
      else
        fill_rate = (ppt - canopyevap_avg) / dt;

      // Estimate average canopy evaporation rate over time step.
      // (canopyevap = average evap rate * dt)
      if (fill_rate == 0) {
        canopyevap = canopyevap_avg;
        tmp_Wdew_avg = tmp_Wdew_init;
        tmp_Wdew_final = tmp_Wdew_init;
        t_steady_state = 0;
        f = 1.0;
      }
      // For fill_rate != 0, use a linear interpolation to estimate average storage
      // and then calculate evaporation from that average storage.
      // Note: this estimate assumes that fill_rate is constant over the time step
      // and that evaporation at the average value of tmp_Wdew is equal to average evap.
      // Neither of these assumptions are correct, but they give a better estimate than
      // simply using the initial estimate for the entire time step.
      else {

        // Compute time to reach steady state, and the final steady-state storage
        if (fill_rate > 0) {
          t_steady_state = (veg_lib[veg_class].Wdmax[month-1] - tmp_Wdew_init) / fill_rate;
          tmp_Wdew_bound = veg_lib[veg_class].Wdmax[month-1];
          f = 1.0;
        }
        else {
          t_steady_state = (0.0 - tmp_Wdew_init) / fill_rate;
          tmp_Wdew_bound = 0.0;
          f = min(1.0, t_steady_state / dt);
        }

        // Compute average storage during time step, as well as end-of-step storage
        if (t_steady_state <= dt) {
          tmp_Wdew_final = tmp_Wdew_bound;
          tmp_Wdew_avg = 0.5 * (tmp_Wdew_init + tmp_Wdew_bound) * t_steady_state / dt
			+ tmp_Wdew_bound * (dt - t_steady_state) / dt;
        }
        else {
          tmp_Wdew_final = tmp_Wdew_init + (tmp_Wdew_bound - tmp_Wdew_init) * dt / t_steady_state;
          tmp_Wdew_avg = 0.5 * (tmp_Wdew_init + tmp_Wdew_final);
        }

        // Compute revised estimate of canopyevap based on average storage
        canopyevap = pow((tmp_Wdew_avg / veg_lib[veg_class].Wdmax[month-1]),
			(2.0/3.0)) * Epot;

        // If we're diverging, split the difference
        if (canopyevap_avg_prev != canopyevap_avg_prev_prev
            && fabs(canopyevap - canopyevap_avg) - fabs(canopyevap_avg_prev - canopyevap_avg_prev_prev) > 0) {
          canopyevap = 0.25 * (canopyevap + canopyevap_avg + canopyevap_avg_prev + canopyevap_avg_prev_prev);
        }

        // If we're oscillating around the same 2 answers, split the difference
        if (fabs(canopyevap - canopyevap_avg_prev) < EVAP_TOL) {
          canopyevap = 0.5 * (canopyevap + canopyevap_avg);
        }

      }
//fprintf(stderr,"%d %f %f %f %f\n",count,tmp_Wdew_init,tmp_Wdew_final,t_steady_state,tmp_Wdew_avg);
//fprintf(stderr,"%d %f %f %f %f\n",count,ppt,canopyevap,canopyevap_avg,canopyevap_avg_prev);

      count++;
      if (count > MAX_ITER) {
//        vicerror("too many iterations");
        canopyevap = 0.25 * (canopyevap + canopyevap_avg + canopyevap_avg_prev + canopyevap_avg_prev_prev);
        break;
      }
        


      } while (fabs(canopyevap - canopyevap_avg) > EVAP_TOL);


//fprintf(stderr,"\n");



      // Don't allow canopyevap to evaporate more water than is available.
      // We've already determined the change in storage, so the available
      // water is precip - change in storage.
      if (canopyevap > ppt - (tmp_Wdew_final - tmp_Wdew_init))
        canopyevap = ppt - (tmp_Wdew_final - tmp_Wdew_init);
    
      // Calculate throughfall, if any.
      // Throughfall only occurs for the period of time in which canopy storage
      // is full (i.e. from t=t_steady_state until t=dt).
      // The rates of precip and evap during this interval are
      // ppt/dt and Epot/dt.
      if (fill_rate > 0 && t_steady_state < dt) {
        throughfall = (ppt - Epot) * (dt - t_steady_state) / dt;
        if (throughfall < 0) throughfall = 0.0;
      }
      else if (fill_rate == 0 && ppt > canopyevap_avg) {
        // If fill_rate is 0 and ppt > canopyevap_avg, then canopy storage is
        // full from beginning of time step, canopyevap_avg = canopy_evap = Epot,
        // and we're at steady state for entire time step, i.e. t_steady_state = 0.
        throughfall = (ppt - Epot);
      }

      // Check water balance and re-apportion any error
      error = ppt - canopyevap - throughfall - (tmp_Wdew_final - tmp_Wdew_init);
      if (error !=0) {
        if (throughfall > 0) {
          canopyevap += error * canopyevap / (canopyevap + throughfall);
          throughfall = ppt - canopyevap - (tmp_Wdew_final - tmp_Wdew_init);
        }
        else {
          canopyevap += error;
        }
      }

      tmp_Wdew = tmp_Wdew_final;

      // Add in any throughfall induced by change in lai
      throughfall += throughfall_lai;

      /*******************************************
        Compute Evapotranspiration from Vegetation
      *******************************************/
      if(CALC_EVAP)
	transpiration(tmp_layer, veg_class, month, rad,
		      vpd, net_short, air_temp, ra,
		      ppt, f, dt, tmp_veg_var->Wdew, elevation,
		      depth, Wcr, Wpwp, &tmp_Wdew,
		      &canopyevap, layerevap, root);

    }

    tmp_veg_var->canopyevap = canopyevap;
    tmp_veg_var->throughfall = throughfall;
    tmp_veg_var->Wdew = tmp_Wdew;
    tmp_Evap = canopyevap;
    for(i=0;i<options.Nlayer;i++) {
      tmp_layer[i].evap  = layerevap[i];
      tmp_Evap          += layerevap[i];
    }
    
    Evap += tmp_Evap * mu / (1000. * dt * 3600.);

  }

  return (Evap);

}

/**********************************************************************
	EVAPOTRANSPIRATION ROUTINE
**********************************************************************/

void transpiration(layer_data_struct *layer,
		   int veg_class, 
		   int month, 
		   double rad,
		   double vpd,
		   double net_short,
		   double air_temp,
		   double ra,
		   double ppt,
		   double f,
		   double dt,
		   double Wdew,
		   double elevation,
		   double *depth,
		   double *Wcr,
		   double *Wpwp,
		   double *new_Wdew,
		   double *canopyevap,
		   double *layerevap,
		   float  *root)
/**********************************************************************
  Computes evapotranspiration for unfrozen soils
  Allows for multiple layers.
**********************************************************************/
{
  extern veg_lib_struct *veg_lib;
  extern option_struct options;

  int i;
  double gsm_inv;               	/* soil moisture stress factor */
  double moist1, moist2;                /* tmp holding of moisture */
  double evap;                          /* tmp holding for evap total */
  double Wcr1;                          /* tmp holding of critical water for upper layers */
  double root_sum;                      /* proportion of roots in moist>Wcr zones */
  double spare_evap;                    /* evap for 2nd distribution */
  double avail_moist[MAX_LAYERS];         /* moisture available for trans */

  /********************************************************************** 
     EVAPOTRANSPIRATION

     Calculation of the evapotranspirations
     2.18

     First part: Soil moistures and root fractions of both layers
     influence each other

     Re-written to allow for multi-layers.
  **********************************************************************/
 
  /**************************************************
    Compute moisture content in combined upper layers
    **************************************************/
  moist1 = 0.0;
  Wcr1 = 0.0;  
  for(i=0;i<options.Nlayer-1;i++){
    if(root[i] > 0.) {
      avail_moist[i] = layer[i].moist - layer[i].ice;

      moist1+=avail_moist[i];
      Wcr1 += Wcr[i];
    }
    else avail_moist[i]=0.;
  }

  /*****************************************
    Compute moisture content in lowest layer
    *****************************************/
  i=options.Nlayer-1;
  moist2 = layer[i].moist - layer[i].ice;

  avail_moist[i]=moist2;

  /******************************************************************
    CASE 1: Moisture in both layers exceeds Wcr, or Moisture in
    layer with more than half of the roots exceeds Wcr.

    Potential evapotranspiration not hindered by soil dryness.  If
    layer with less than half the roots is dryer than Wcr, extra
    evaporation is taken from the wetter layer.  Otherwise layers
    contribute to evapotransipration based on root fraction.
  ******************************************************************/

  if( (moist1>=Wcr1 && moist2>=Wcr[options.Nlayer-1] && Wcr1>0.) ||
      (moist1>=Wcr1 && (1-root[options.Nlayer-1])>= 0.5) ||
      (moist2>=Wcr[options.Nlayer-1] &&
      root[options.Nlayer-1]>=0.5) ){
    gsm_inv=1.0;
    evap = penman(rad, vpd * 1000., ra, veg_lib[veg_class].rmin,
		  veg_lib[veg_class].rarc, veg_lib[veg_class].LAI[month-1], 
		  gsm_inv, air_temp, net_short, elevation, 
		  veg_lib[veg_class].RGL) * dt / 24.0 *
      (1.0-f*pow((Wdew/veg_lib[veg_class].Wdmax[month-1]),
		 (2.0/3.0)));

    /** divide up evap based on root distribution **/
    /** Note the indexing of the roots **/
    root_sum=1.0;
    spare_evap=0.0;
    for(i=0;i<options.Nlayer;i++){
      if(avail_moist[i]>=Wcr[i]){
        layerevap[i]=evap*(double)root[i];
      }
      else {
          
        if (avail_moist[i] >= Wpwp[i]) 
          gsm_inv = (avail_moist[i] - Wpwp[i]) /
                    (Wcr[i] - Wpwp[i]);
        else 
          gsm_inv=0.0;
	    
        layerevap[i]  = evap*gsm_inv*(double)root[i];
        root_sum     -= root[i];
        spare_evap    = evap*(double)root[i]*(1.0-gsm_inv);
      }
    }

    /** Assign excess evaporation to wetter layer **/
    if(spare_evap>0.0){
      for(i=0;i<options.Nlayer;i++){
        if(avail_moist[i] >= Wcr[i]){
          layerevap[i] += (double)root[i]*spare_evap/root_sum;
        }
      }
    }
  }

  /*********************************************************************
    CASE 2: Independent evapotranspirations

    Evapotranspiration is restricted by low soil moisture. Evaporation
    is computed independantly from each soil layer.
  *********************************************************************/

  else {

    for(i=0;i<options.Nlayer;i++){
      /** Set evaporation restriction factor **/
      if(avail_moist[i] >= Wcr[i])
	gsm_inv=1.0;
      else if(avail_moist[i] >= Wpwp[i])
	gsm_inv=(avail_moist[i] - Wpwp[i]) /
	  (Wcr[i] - Wpwp[i]);
      else 
	gsm_inv=0.0;

      if(gsm_inv > 0.0){
	/** Compute potential evapotranspiration **/
        layerevap[i] = penman(rad, vpd * 1000., ra, veg_lib[veg_class].rmin,
			      veg_lib[veg_class].rarc, 
			      veg_lib[veg_class].LAI[month-1], gsm_inv, 
			      air_temp, net_short, elevation, 
			      veg_lib[veg_class].RGL) * dt / 24.0 
	  * (double)root[i] * (1.0-f*pow((Wdew/
					  veg_lib[veg_class].Wdmax[month-1]),
					 (2.0/3.0)));
      }
      else layerevap[i] = 0.0;

    }
  }
    
  /****************************************************************
    Check that evapotransipration does not cause soil moisture to 
    fall below wilting point.
  ****************************************************************/
  for(i=0;i<options.Nlayer;i++){
    if(layerevap[i] > layer[i].moist - Wpwp[i]) {
      layerevap[i] = layer[i].moist - Wpwp[i];
    }
    if ( layerevap[i] < 0.0 ) {
      layerevap[i] = 0.0;
    }
  }

}
